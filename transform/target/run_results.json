{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.10", "generated_at": "2025-09-07T02:14:08.271301Z", "invocation_id": "fef4b2e3-11b4-4852-b49e-11c933a6d88e", "invocation_started_at": "2025-09-07T02:13:58.018509Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:03.217356Z", "completed_at": "2025-09-07T02:14:03.260508Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:03.263315Z", "completed_at": "2025-09-07T02:14:04.030773Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8220858573913574, "adapter_response": {"_message": "SELECT 11323", "code": "SELECT", "rows_affected": 11323}, "message": "SELECT 11323", "failures": null, "unique_id": "model.star_dw.dim_date", "compiled": true, "compiled_code": "\n-- Date dimension generated on the fly (adjust range as needed)\nwith days as (\n  select generate_series(date '2000-01-01', date '2030-12-31', interval '1 day')::date as d\n)\nselect\n  extract(year from d)::int * 10000 + extract(month from d)::int * 100 + extract(day from d)::int as date_key,\n  d as full_date,\n  extract(year from d)::int as year,\n  extract(quarter from d)::smallint as quarter,\n  extract(month from d)::smallint as month,\n  to_char(d,'Mon') as month_name,\n  extract(day from d)::smallint as day,\n  extract(isodow from d)::smallint as day_of_week,\n  to_char(d,'Dy') as day_name,\n  extract(week from d)::smallint as week_of_year,\n  (extract(isodow from d) in (6,7)) as is_weekend,\n  now() as created_at\nfrom days", "relation_name": "\"dw\".\"dw\".\"dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:04.063997Z", "completed_at": "2025-09-07T02:14:04.080874Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:04.083418Z", "completed_at": "2025-09-07T02:14:04.369293Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.315263032913208, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.dim_member", "compiled": true, "compiled_code": "\n-- Current member dimension rows derived from snapshot (SCD2 readiness)\nselect\n    s.member_id,\n    upper(s.first_name) as first_name,\n    upper(s.last_name)  as last_name,\n    s.dob as date_of_birth,\n    s.gender,\n    s.age_group,\n    s.region,\n    s.plan_metal,\n    s.load_id,\n    s.dbt_valid_from as validity_start_ts,\n    s.dbt_valid_to   as validity_end_ts,\n    (s.dbt_valid_to is null) as is_current\nfrom \"dw\".\"history\".\"member_snapshot\" s\nwhere s.dbt_valid_to is null", "relation_name": "\"dw\".\"dw\".\"dim_member\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:04.396126Z", "completed_at": "2025-09-07T02:14:04.433746Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:04.436742Z", "completed_at": "2025-09-07T02:14:04.649683Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.26248717308044434, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.dim_plan", "compiled": true, "compiled_code": "\n-- Current plan dimension rows derived from snapshot (SCD2 readiness)\nselect\n    s.plan_id,\n    upper(s.name) as plan_name,\n    s.metal_tier,\n    s.monthly_premium,\n    s.deductible,\n    s.oop_max,\n    s.coinsurance_rate,\n    s.pcp_copay,\n    s.effective_year,\n    s.load_id,\n    s.dbt_valid_from as validity_start_ts,\n    s.dbt_valid_to   as validity_end_ts,\n    (s.dbt_valid_to is null) as is_current\nfrom \"dw\".\"history\".\"plan_snapshot\" s\nwhere s.dbt_valid_to is null", "relation_name": "\"dw\".\"dw\".\"dim_plan\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:04.674527Z", "completed_at": "2025-09-07T02:14:04.694508Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:04.698177Z", "completed_at": "2025-09-07T02:14:04.880938Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2150883674621582, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.dim_provider", "compiled": true, "compiled_code": "\n-- Current provider dimension rows derived from snapshot (SCD2 readiness)\nselect\n    s.provider_id,\n    s.npi,\n    upper(s.name) as provider_name,\n    s.specialty,\n    s.street,\n    s.city,\n    s.state,\n    s.zip,\n    s.phone,\n    s.load_id,\n    s.dbt_valid_from as validity_start_ts,\n    s.dbt_valid_to   as validity_end_ts,\n    (s.dbt_valid_to is null) as is_current\nfrom \"dw\".\"history\".\"provider_snapshot\" s\nwhere s.dbt_valid_to is null", "relation_name": "\"dw\".\"dw\".\"dim_provider\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:04.908303Z", "completed_at": "2025-09-07T02:14:04.925214Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:04.928620Z", "completed_at": "2025-09-07T02:14:05.106294Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20636296272277832, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.stg_claims", "compiled": true, "compiled_code": "-- Basic staging model for claims\n\n\nwith src as (\n    select * from \"dw\".\"staging\".\"claims_raw\"\n)\nselect\n    claim_id,\n    member_id,\n    provider_id,\n    plan_id,\n    service_date as claim_date,\n    claim_amount,\n    allowed_amount,\n    paid_amount,\n    status as claim_status,\n    diagnosis_code,\n    procedure_code,\n    load_id,\n    load_timestamp\nfrom src", "relation_name": "\"dw\".\"dw\".\"stg_claims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:05.134451Z", "completed_at": "2025-09-07T02:14:05.148690Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:05.151485Z", "completed_at": "2025-09-07T02:14:05.336988Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21185088157653809, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.stg_enrollments", "compiled": true, "compiled_code": "\n\n-- Staging: enrollments (add coverage_days for convenience)\nwith src as (\n  select * from \"dw\".\"staging\".\"enrollments_raw\"\n)\nselect\n  enrollment_id,\n  member_id,\n  plan_id,\n  start_date,\n  end_date,\n  (end_date - start_date + 1)::int as coverage_days,\n  premium_paid,\n  csr_variant,\n  load_id,\n  load_timestamp\nfrom src", "relation_name": "\"dw\".\"dw\".\"stg_enrollments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:05.363051Z", "completed_at": "2025-09-07T02:14:05.379482Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:05.382290Z", "completed_at": "2025-09-07T02:14:05.559395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2043149471282959, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.stg_members", "compiled": true, "compiled_code": "\n\nwith src as (\n    select * from \"dw\".\"staging\".\"members_raw\"\n)\nselect\n    member_id,\n    first_name,\n    last_name,\n    dob as date_of_birth,\n    gender,\n    email,\n    phone,\n    street,\n    city,\n    state,\n    zip,\n    fpl_ratio,\n    hios_id,\n    plan_network_access_type,\n    plan_metal,\n    age_group,\n    region,\n    enrollment_length_continuous,\n    clinical_segment,\n    general_agency_name,\n    broker_name,\n    sa_contracting_entity_name,\n    new_member_in_period,\n    member_used_app,\n    member_had_web_login,\n    member_visited_new_provider_ind,\n    high_cost_member,\n    mutually_exclusive_hcc_condition,\n    geographic_reporting,\n    year,\n    load_id,\n    load_timestamp\nfrom src", "relation_name": "\"dw\".\"dw\".\"stg_members\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:05.584499Z", "completed_at": "2025-09-07T02:14:05.600041Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:05.603492Z", "completed_at": "2025-09-07T02:14:05.808998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23317503929138184, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.stg_plans", "compiled": true, "compiled_code": "\n\n-- Staging: plans (clean + light typing / renames if needed)\nwith src as (\n  select * from \"dw\".\"staging\".\"plans_raw\"\n)\nselect\n  plan_id,\n  name as plan_name,\n  metal_tier,\n  monthly_premium::numeric(10,2) as monthly_premium,\n  deductible,\n  oop_max,\n  coinsurance_rate,\n  pcp_copay,\n  effective_year,\n  load_id,\n  load_timestamp\nfrom src", "relation_name": "\"dw\".\"dw\".\"stg_plans\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:05.834354Z", "completed_at": "2025-09-07T02:14:05.849986Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:05.852451Z", "completed_at": "2025-09-07T02:14:06.026497Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20130491256713867, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.stg_providers", "compiled": true, "compiled_code": "\n\n-- Staging: providers\nwith src as (\n  select * from \"dw\".\"staging\".\"providers_raw\"\n)\nselect\n  provider_id,\n  npi,\n  name as provider_name,\n  specialty,\n  street,\n  city,\n  state,\n  zip,\n  phone,\n  load_id,\n  load_timestamp\nfrom src", "relation_name": "\"dw\".\"dw\".\"stg_providers\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:06.054020Z", "completed_at": "2025-09-07T02:14:06.107678Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:06.109906Z", "completed_at": "2025-09-07T02:14:06.709785Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6675817966461182, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.star_dw.fct_claim", "compiled": true, "compiled_code": "\n\nwith claims as (\n    select * from \"dw\".\"dw\".\"stg_claims\"\n), dim_member as (\n    select member_id from \"dw\".\"dw\".\"dim_member\"\n)\nselect\n    c.claim_id,\n    c.member_id,\n    c.provider_id,\n    c.plan_id,\n    c.claim_date,\n    c.claim_amount,\n    c.allowed_amount,\n    c.paid_amount,\n    c.claim_status,\n    c.diagnosis_code,\n    c.procedure_code,\n    c.load_id,\n    c.load_timestamp\nfrom claims c\nleft join dim_member dm using (member_id)\n\n\nwhere c.load_timestamp > (select coalesce(max(load_timestamp), '1900-01-01') from \"dw\".\"dw\".\"fct_claim\")\n", "relation_name": "\"dw\".\"dw\".\"fct_claim\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:06.737148Z", "completed_at": "2025-09-07T02:14:06.758576Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:06.760924Z", "completed_at": "2025-09-07T02:14:07.018187Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28885793685913086, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.star_dw.fct_enrollment", "compiled": true, "compiled_code": "\n\nwith enrollments as (\n    select * from \"dw\".\"dw\".\"stg_enrollments\"\n), dim_member as (\n    select member_id from \"dw\".\"dw\".\"dim_member\"\n), dim_plan as (\n    select plan_id from \"dw\".\"dw\".\"dim_plan\"\n)\nselect\n    e.enrollment_id,\n    e.member_id,\n    e.plan_id,\n    e.start_date,\n    e.end_date,\n    e.coverage_days,\n    e.premium_paid,\n    e.csr_variant,\n    e.load_id,\n    e.load_timestamp\nfrom enrollments e\nleft join dim_member dm using (member_id)\nleft join dim_plan dp using (plan_id)\n\n\nwhere e.load_timestamp > (select coalesce(max(load_timestamp), '1900-01-01') from \"dw\".\"dw\".\"fct_enrollment\")\n", "relation_name": "\"dw\".\"dw\".\"fct_enrollment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:07.043741Z", "completed_at": "2025-09-07T02:14:07.059729Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:07.063030Z", "completed_at": "2025-09-07T02:14:07.317968Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28204870223999023, "adapter_response": {"_message": "SELECT 12", "code": "SELECT", "rows_affected": 12}, "message": "SELECT 12", "failures": null, "unique_id": "model.star_dw.agg_claims_monthly", "compiled": true, "compiled_code": "\n\n-- Monthly claims summary using semantic layer metrics\n-- This model demonstrates how to use the semantic layer for reporting\nselect\n    date_trunc('month', claim_date) as report_month,\n    count(claim_id) as total_claims,\n    sum(claim_amount) as total_billed_amount,\n    sum(allowed_amount) as total_allowed_amount,\n    sum(paid_amount) as total_paid_amount,\n    avg(claim_amount) as avg_claim_amount,\n    count(distinct member_id) as unique_members_with_claims,\n    count(distinct provider_id) as unique_providers,\n    \n    -- Calculate key ratios\n    case \n        when sum(claim_amount) > 0 \n        then sum(allowed_amount) / sum(claim_amount) \n        else 0 \n    end as allowance_ratio,\n    \n    case \n        when sum(allowed_amount) > 0 \n        then sum(paid_amount) / sum(allowed_amount) \n        else 0 \n    end as payment_ratio,\n    \n    -- Claims by status\n    sum(case when claim_status = 'approved' then 1 else 0 end) as approved_claims,\n    sum(case when claim_status = 'denied' then 1 else 0 end) as denied_claims,\n    sum(case when claim_status = 'pending' then 1 else 0 end) as pending_claims,\n    \n    -- Calculate approval rate\n    case \n        when count(claim_id) > 0 \n        then sum(case when claim_status = 'approved' then 1 else 0 end)::float / count(claim_id) \n        else 0 \n    end as approval_rate\n\nfrom \"dw\".\"dw\".\"fct_claim\"\nwhere claim_date >= '2025-01-01'  -- Current year only\ngroup by date_trunc('month', claim_date)\norder by report_month", "relation_name": "\"dw\".\"dw\".\"agg_claims_monthly\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:07.343585Z", "completed_at": "2025-09-07T02:14:07.361742Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:07.365248Z", "completed_at": "2025-09-07T02:14:07.606972Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.27268195152282715, "adapter_response": {"_message": "SELECT 30", "code": "SELECT", "rows_affected": 30}, "message": "SELECT 30", "failures": null, "unique_id": "model.star_dw.agg_provider_performance", "compiled": true, "compiled_code": "\n\n-- Provider performance analysis using semantic layer\n-- Provides insights into provider productivity and cost efficiency\nwith provider_claims as (\n    select \n        c.provider_id,\n        count(c.claim_id) as total_claims,\n        count(distinct c.member_id) as unique_members_served,\n        sum(c.claim_amount) as total_billed,\n        sum(c.allowed_amount) as total_allowed,\n        sum(c.paid_amount) as total_paid,\n        avg(c.claim_amount) as avg_claim_amount,\n        \n        -- Claims by status\n        sum(case when c.claim_status = 'approved' then 1 else 0 end) as approved_claims,\n        sum(case when c.claim_status = 'denied' then 1 else 0 end) as denied_claims,\n        sum(case when c.claim_status = 'pending' then 1 else 0 end) as pending_claims,\n        \n        -- Most common diagnosis and procedure codes\n        mode() within group (order by c.diagnosis_code) as most_common_diagnosis,\n        mode() within group (order by c.procedure_code) as most_common_procedure\n        \n    from \"dw\".\"dw\".\"fct_claim\" c\n    where c.claim_date >= '2025-01-01'\n    group by c.provider_id\n),\n\nprovider_info as (\n    select \n        provider_id,\n        provider_name,\n        specialty,\n        city,\n        state\n    from \"dw\".\"dw\".\"dim_provider\"\n    where is_current = true\n)\n\nselect \n    p.provider_id,\n    pi.provider_name,\n    pi.specialty,\n    pi.city,\n    pi.state,\n    \n    -- Volume metrics\n    p.total_claims,\n    p.unique_members_served,\n    \n    -- Financial metrics\n    p.total_billed,\n    p.total_allowed,\n    p.total_paid,\n    p.avg_claim_amount,\n    \n    -- Performance ratios\n    case \n        when p.total_billed > 0 \n        then p.total_allowed / p.total_billed \n        else 0 \n    end as allowance_ratio,\n    \n    case \n        when p.total_allowed > 0 \n        then p.total_paid / p.total_allowed \n        else 0 \n    end as payment_ratio,\n    \n    case \n        when p.total_claims > 0 \n        then p.approved_claims::float / p.total_claims \n        else 0 \n    end as approval_rate,\n    \n    -- Efficiency metrics\n    case \n        when p.unique_members_served > 0 \n        then p.total_claims::float / p.unique_members_served \n        else 0 \n    end as claims_per_member,\n    \n    case \n        when p.unique_members_served > 0 \n        then p.total_paid / p.unique_members_served \n        else 0 \n    end as cost_per_member,\n    \n    -- Status breakdown\n    p.approved_claims,\n    p.denied_claims,\n    p.pending_claims,\n    \n    -- Clinical patterns\n    p.most_common_diagnosis,\n    p.most_common_procedure,\n    \n    -- Provider categorization\n    case \n        when p.total_claims >= 100 then 'High Volume'\n        when p.total_claims >= 50 then 'Moderate Volume'\n        when p.total_claims >= 10 then 'Low Volume'\n        else 'Very Low Volume'\n    end as volume_category,\n    \n    case \n        when p.total_paid >= 50000 then 'High Cost'\n        when p.total_paid >= 20000 then 'Moderate Cost'\n        when p.total_paid >= 5000 then 'Low Cost'\n        else 'Very Low Cost'\n    end as cost_category\n\nfrom provider_claims p\nleft join provider_info pi on p.provider_id = pi.provider_id\norder by p.total_claims desc", "relation_name": "\"dw\".\"dw\".\"agg_provider_performance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:07.633503Z", "completed_at": "2025-09-07T02:14:07.652587Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:07.655800Z", "completed_at": "2025-09-07T02:14:07.970372Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.34480881690979004, "adapter_response": {"_message": "SELECT 4999", "code": "SELECT", "rows_affected": 4999}, "message": "SELECT 4999", "failures": null, "unique_id": "model.star_dw.agg_member_cost", "compiled": true, "compiled_code": "\n\n-- Member cost analysis using semantic layer\n-- Provides per-member per-month (PMPM) and per-member per-year (PMPY) cost metrics\nwith member_enrollment_months as (\n    select \n        e.member_id,\n        e.plan_id,\n        sum(e.coverage_days) / 30.44 as total_enrollment_months  -- Average days per month\n    from \"dw\".\"dw\".\"fct_enrollment\" e\n    where e.start_date >= '2025-01-01'\n    group by e.member_id, e.plan_id\n),\n\nmember_claims_cost as (\n    select \n        c.member_id,\n        count(c.claim_id) as total_claims,\n        sum(c.claim_amount) as total_billed,\n        sum(c.allowed_amount) as total_allowed,\n        sum(c.paid_amount) as total_paid\n    from \"dw\".\"dw\".\"fct_claim\" c\n    where c.claim_date >= '2025-01-01'\n    group by c.member_id\n),\n\nmember_demographics as (\n    select \n        member_id,\n        age_group,\n        gender,\n        region,\n        plan_metal,\n        is_current\n    from \"dw\".\"dw\".\"dim_member\"\n)\n\nselect \n    md.member_id,\n    md.age_group,\n    md.gender,\n    md.region,\n    md.plan_metal,\n    \n    -- Enrollment metrics\n    coalesce(mem.total_enrollment_months, 0) as enrollment_months,\n    \n    -- Claims metrics\n    coalesce(mcc.total_claims, 0) as total_claims,\n    coalesce(mcc.total_billed, 0) as total_billed_amount,\n    coalesce(mcc.total_allowed, 0) as total_allowed_amount,\n    coalesce(mcc.total_paid, 0) as total_paid_amount,\n    \n    -- Cost per member metrics\n    case \n        when coalesce(mem.total_enrollment_months, 0) > 0 \n        then coalesce(mcc.total_paid, 0) / mem.total_enrollment_months \n        else 0 \n    end as pmpm_cost,  -- Per Member Per Month\n    \n    case \n        when coalesce(mem.total_enrollment_months, 0) > 0 \n        then (coalesce(mcc.total_paid, 0) / mem.total_enrollment_months) * 12 \n        else 0 \n    end as pmpy_cost,  -- Per Member Per Year\n    \n    -- Utilization metrics\n    case \n        when coalesce(mem.total_enrollment_months, 0) > 0 \n        then coalesce(mcc.total_claims, 0) / mem.total_enrollment_months \n        else 0 \n    end as claims_per_member_per_month,\n    \n    -- Risk categorization\n    case \n        when coalesce(mcc.total_paid, 0) = 0 then 'No Claims'\n        when coalesce(mcc.total_paid, 0) <= 500 then 'Low Cost'\n        when coalesce(mcc.total_paid, 0) <= 2000 then 'Moderate Cost'\n        when coalesce(mcc.total_paid, 0) <= 10000 then 'High Cost'\n        else 'Very High Cost'\n    end as cost_category\n\nfrom member_demographics md\nleft join member_enrollment_months mem on md.member_id = mem.member_id\nleft join member_claims_cost mcc on md.member_id = mcc.member_id\nwhere md.is_current = true  -- Only current member records\norder by total_paid_amount desc", "relation_name": "\"dw\".\"dw\".\"agg_member_cost\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-07T02:14:07.997784Z", "completed_at": "2025-09-07T02:14:08.021668Z"}, {"name": "execute", "started_at": "2025-09-07T02:14:08.024290Z", "completed_at": "2025-09-07T02:14:08.185000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1959538459777832, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_dw.dashboard_summary", "compiled": true, "compiled_code": "\n\n-- Healthcare dashboard summary combining key metrics\n-- This view provides high-level KPIs for executive reporting\nwith monthly_metrics as (\n    select \n        report_month,\n        total_claims,\n        total_paid_amount,\n        unique_members_with_claims,\n        approval_rate\n    from \"dw\".\"dw\".\"agg_claims_monthly\"\n),\n\ncost_distribution as (\n    select \n        cost_category,\n        count(member_id) as member_count,\n        sum(total_paid_amount) as category_cost,\n        avg(pmpm_cost) as avg_pmpm\n    from \"dw\".\"dw\".\"agg_member_cost\"\n    group by cost_category\n),\n\nprovider_summary as (\n    select \n        specialty,\n        count(provider_id) as provider_count,\n        sum(total_claims) as specialty_claims,\n        avg(approval_rate) as avg_approval_rate\n    from \"dw\".\"dw\".\"agg_provider_performance\"\n    group by specialty\n)\n\n-- Combine into summary dashboard metrics\nselect \n    current_date as report_date,\n    \n    -- Overall Claims Metrics (Latest Month)\n    (select total_claims from monthly_metrics order by report_month desc limit 1) as latest_month_claims,\n    (select total_paid_amount from monthly_metrics order by report_month desc limit 1) as latest_month_cost,\n    (select approval_rate from monthly_metrics order by report_month desc limit 1) as latest_approval_rate,\n    \n    -- Member Distribution\n    (select sum(member_count) from cost_distribution) as total_active_members,\n    (select member_count from cost_distribution where cost_category = 'High Cost') as high_cost_members,\n    (select member_count from cost_distribution where cost_category = 'Very High Cost') as very_high_cost_members,\n    \n    -- Cost Concentration (Pareto Analysis)\n    round(\n        (select sum(category_cost) from cost_distribution where cost_category in ('High Cost', 'Very High Cost'))::numeric / \n        (select sum(category_cost) from cost_distribution) * 100, 2\n    ) as high_cost_member_cost_percentage,\n    \n    -- Provider Network\n    (select count(distinct provider_id) from \"dw\".\"dw\".\"agg_provider_performance\") as total_active_providers,\n    (select count(provider_id) from \"dw\".\"dw\".\"agg_provider_performance\" where volume_category = 'High Volume') as high_volume_providers,\n    \n    -- Quality Metrics\n    (select avg(approval_rate) from \"dw\".\"dw\".\"agg_provider_performance\") as network_avg_approval_rate,\n    \n    -- Trending (Month over Month Growth)\n    round(\n        ((select total_claims from monthly_metrics order by report_month desc limit 1) - \n         (select total_claims from monthly_metrics order by report_month desc offset 1 limit 1))::numeric /\n         (select total_claims from monthly_metrics order by report_month desc offset 1 limit 1) * 100, 2\n    ) as claims_mom_growth_pct,\n    \n    round(\n        ((select total_paid_amount from monthly_metrics order by report_month desc limit 1) - \n         (select total_paid_amount from monthly_metrics order by report_month desc offset 1 limit 1))::numeric /\n         (select total_paid_amount from monthly_metrics order by report_month desc offset 1 limit 1) * 100, 2\n    ) as cost_mom_growth_pct", "relation_name": "\"dw\".\"dw\".\"dashboard_summary\"", "batch_results": null}], "elapsed_time": 5.751168489456177, "args": {"use_colors_file": true, "send_anonymous_usage_stats": true, "static_parser": true, "cache_selected_only": false, "introspect": true, "log_level_file": "debug", "strict_mode": false, "log_file_max_bytes": 10485760, "favor_state": false, "source_freshness_run_project_hooks": true, "macro_debugging": false, "populate_cache": true, "require_all_warnings_handled_by_warn_error": false, "version_check": true, "indirect_selection": "eager", "profiles_dir": "/home/garth/.dbt", "write_json": true, "log_level": "info", "skip_nodes_if_on_run_start_fails": false, "quiet": false, "validate_macro_args": false, "require_generic_test_arguments_property": true, "use_fast_test_edges": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "invocation_command": "dbt run", "require_nested_cumulative_type_params": false, "printer_width": 80, "show_resource_report": false, "require_yaml_configuration_for_mf_time_spines": false, "log_path": "/home/garth/projects/star/transform/logs", "require_resource_names_without_spaces": true, "vars": {}, "log_format_file": "debug", "empty": false, "print": true, "state_modified_compare_more_unrendered_values": false, "require_explicit_package_overrides_for_builtin_materializations": true, "require_batched_execution_for_custom_microbatch_strategy": false, "state_modified_compare_vars": false, "upload_to_artifacts_ingest_api": false, "show_all_deprecations": false, "use_colors": true, "partial_parse": true, "select": [], "log_format": "default", "which": "run", "project_dir": "/home/garth/projects/star/transform", "defer": false, "exclude": [], "partial_parse_file_diff": true}}